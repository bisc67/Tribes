//==============================================================================
//
//  x_color_inline.hpp
//
//==============================================================================

#ifndef X_COLOR_INLINE_HPP
#define X_COLOR_INLINE_HPP
#else
#error "File " __FILE__ " has been included twice!"
#endif

//==============================================================================
//  INCLUDES
//==============================================================================

#ifndef X_PLUS_HPP
#include "x_plus.hpp"
#endif

//==============================================================================
//  FUNCTIONS
//==============================================================================

inline xcolor::xcolor( void )
{
}

//==============================================================================

inline xcolor::xcolor( const xcolor& C )
{
    A = C.A;
    R = C.R;
    G = C.G;
    B = C.B;
}

//==============================================================================

inline xcolor::xcolor( u8 aR, u8 aG, u8 aB, u8 aA )
{   
    A = aA;
    R = aR;
    G = aG;
    B = aB;
}

//==============================================================================

inline xcolor::xcolor( u32 ARGB )
{   
    A = (u8)((ARGB & 0xFF000000) >> 24);
    R = (u8)((ARGB & 0x00FF0000) >> 16);
    G = (u8)((ARGB & 0x0000FF00) >>  8);
    B = (u8)((ARGB & 0x000000FF) >>  0);
}

//==============================================================================

inline void xcolor::Set( u8 aR, u8 aG, u8 aB, u8 aA )
{   
    A = aA;
    R = aR;
    G = aG;
    B = aB;
}

//==============================================================================

inline void xcolor::Set( u32 ARGB )
{   
    A = (u8)((ARGB & 0xFF000000) >> 24);
    R = (u8)((ARGB & 0x00FF0000) >> 16);
    G = (u8)((ARGB & 0x0000FF00) >>  8);
    B = (u8)((ARGB & 0x000000FF) >>  0);
}

//==============================================================================

inline void xcolor::Random( u8 aA )
{
    A = aA;
    B = (u8)x_irand( 0, 255 );
    G = (u8)x_irand( 0, 255 );
    R = (u8)x_irand( 0, 255 );
}

//==============================================================================

inline const xcolor& xcolor::operator = ( const xcolor& C )
{
    A = C.A;
    R = C.R;
    G = C.G;
    B = C.B;

    return( *this );
}

//==============================================================================

inline const xcolor& xcolor::operator = ( u32 ARGB )
{   
    A = (u8)((ARGB & 0xFF000000) >> 24);
    R = (u8)((ARGB & 0x00FF0000) >> 16);
    G = (u8)((ARGB & 0x0000FF00) >>  8);
    B = (u8)((ARGB & 0x000000FF) >>  0);

    return( *this );
}

//==============================================================================

inline xcolor::operator const u32( void ) const
{
    return( *((u32*)this) );
}

//==============================================================================

inline u32 xcolor::GetRGBA( void ) const
{
    return ( R << 24 ) | ( G << 16 ) | ( B << 8 ) | A;
}


//==============================================================================
