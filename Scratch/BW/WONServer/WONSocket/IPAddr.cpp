#include "IPAddr.h"

using namespace std;
using namespace WONAPI;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

IPAddr::IPAddr()
{
	memset(&mAddr,0,sizeof(mAddr));
	mIsValid = false;
	mRememberHostString = false;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
IPAddr::IPAddr(const SOCKADDR_IN &theAddr)
{
	mRememberHostString = false;
	Set(theAddr);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
IPAddr::IPAddr(const std::string &theHost, unsigned short thePort)
{
	mRememberHostString = false;
	Set(theHost,thePort);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
IPAddr::IPAddr(const std::string &theHostAndPort)
{
	mRememberHostString = false;
	Set(theHostAndPort);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

IPAddr::IPAddr(const char* theHostAndPort)
{
	mRememberHostString = false;
	Set(theHostAndPort);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
IPAddr::IPAddr(long theHost, unsigned short thePort)
{
	mRememberHostString = false;
	Set(theHost,thePort);
}
	
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
IPAddr IPAddr::GetLocalAddr()
{
	char aBuf[1024];
	int aVal = gethostname(aBuf,1024);
	if(aVal==0)
		return IPAddr(aBuf,0);
	else
		return IPAddr();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

bool IPAddr::Set(const std::string &theHost, unsigned short thePort)
{
	memset(&mAddr,0,sizeof(mAddr));
	mIsValid = false;

	unsigned long aHost = inet_addr(theHost.c_str());

	if(aHost==INADDR_NONE) 
	{
		HOSTENT *aHostEnt = gethostbyname(theHost.c_str());
		if(aHostEnt==NULL) 
			return false;
		else
			memcpy(&aHost,aHostEnt->h_addr_list[0],4);
	}

	if(this->mRememberHostString)
		mHostString = theHost;
	else
		mHostString.erase();

	mAddr.sin_family = AF_INET;
	mAddr.sin_addr.s_addr = aHost;
	mAddr.sin_port = htons(thePort);
	mIsValid = true;
	return true;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool IPAddr::Set(const std::string &theHostAndPort)
{
	int aColonIdx = theHostAndPort.find(':');
	if(aColonIdx==string::npos)
	{
		mIsValid = false;
		return false;
	}

	return Set(theHostAndPort.substr(0,aColonIdx),atoi(theHostAndPort.substr(aColonIdx+1).c_str()));
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
const char* IPAddr::GetSixByte() const
{
	return (const char*)&(mAddr.sin_port);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void IPAddr::SetSixByte(const void* theBuf)
{
	memset(&mAddr,0,sizeof(mAddr));
	mAddr.sin_family = AF_INET;
	memcpy(&mAddr.sin_port,theBuf,6);	
	mHostString.erase();
	mIsValid = true;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void IPAddr::Set(const SOCKADDR_IN &theAddr)
{
	mAddr = theAddr;
	mHostString.erase();
	mIsValid = true;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void IPAddr::Set(long theHost, unsigned short thePort)
{
	memset(&mAddr,0,sizeof(mAddr));
	mAddr.sin_family = AF_INET;
	mAddr.sin_addr.s_addr = htonl(theHost);
	mAddr.sin_port = htons(thePort);
	mHostString.erase();
	mIsValid = true;	
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool IPAddr::SetWithDefaultPort(const std::string &theHostAndPort, unsigned short theDefaultPort)
{
	int aColonIdx = theHostAndPort.find(':');
	if(aColonIdx==string::npos)
		return Set(theHostAndPort,theDefaultPort);
	else
		return Set(theHostAndPort);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void IPAddr::SetThePort(unsigned short thePort)
{
	mAddr.sin_port = htons(thePort);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
long IPAddr::GetHost() const
{
	return ntohl(mAddr.sin_addr.s_addr);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
string IPAddr::GetHostString(bool useOriginal) const
{
	if(useOriginal && !mHostString.empty())
		return mHostString;
	else
		return inet_ntoa(mAddr.sin_addr);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
std::string IPAddr::GetHostAndPortString(bool useOriginal) const
{
	long aHost = ntohl(GetHost());
	string aHostStr;
	unsigned char *p = (unsigned char*)&aHost;

	char aBuf[50];
	sprintf(aBuf,"%s:%d",GetHostString(useOriginal).c_str(),GetPort());
	return aBuf;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
unsigned short IPAddr::GetPort() const
{
	return ntohs(mAddr.sin_port);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool IPAddr::IsValid() const
{
	return mIsValid;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

const SOCKADDR_IN& IPAddr::GetSockAddrIn() const
{
	return mAddr;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

bool IPAddr::operator <(const IPAddr& theAddr) const
{
	return memcmp(&(mAddr.sin_port),&(theAddr.mAddr.sin_port),6)<0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool IPAddr::operator ==(const IPAddr& theAddr) const
{
	return memcmp(&(mAddr.sin_port),&(theAddr.mAddr.sin_port),6)==0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool IPAddr::operator !=(const IPAddr& theAddr) const
{
	return memcmp(&(mAddr.sin_port),&(theAddr.mAddr.sin_port),6)!=0;
}
